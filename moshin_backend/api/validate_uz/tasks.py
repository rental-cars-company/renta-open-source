# tasks/verification.py
import json

from celery import shared_task

from api.driverlicenses.models import DriverLicense
from api.passports.models import Passport
from common.document_service.verification_services.utils import (
    parse_validate_uz_data,
)
from common.document_service.verification_services.validate_all import (
    validate_dl_debts_criminals,
)
from common.documents import (
    DOCUMENT_APPROVED,
    DOCUMENT_EXTRACT_FAILED,
    DOCUMENT_EXTRACT_VERIFIED,
)


@shared_task
def verify_dl_debts_task(user_id):
    try:
        license = DriverLicense.objects.filter(user_id=user_id).first()
        if not license:
            print("‚ùå –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        passport = Passport.objects.filter(user_id=user_id).first()
        if not passport:
            print("‚ùå –ù–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        if (
            license.status == DOCUMENT_APPROVED
            and passport.status == DOCUMENT_APPROVED
        ):
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã, validate.uz –Ω–µ –Ω—É–∂–µ–Ω")
            return

        print(
            f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç: {passport.pinfl}, –í–£: {license.serial_number}, –î–†: {license.date_of_birth}"
        )

        response_driver, response_debts, response_criminal_records = (
            validate_dl_debts_criminals(pinfl=passport.pinfl)
        )
        license_data = json.loads(response_driver.text)
        debts_data = json.loads(response_debts.text)

        if not (license_data.get("success") and "data" in license_data):
            print("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –í–£ –Ω–µ—É—Å–ø–µ—à–Ω–∞")
            license.status = DOCUMENT_EXTRACT_FAILED
            license.save(update_fields=["status"])
            return

        debts_sum = debts_data.get("data", {}).get("residual_sum", 0)
        parse_validate_uz_data(
            user=license.user, data=license_data["data"], debts_sum=debts_sum
        )

        license.status = DOCUMENT_EXTRACT_VERIFIED
        license.save(update_fields=["status"])

        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ validate.uz —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        # print(
        #     f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å—É–¥–∏–º–æ—Å—Ç–∏: {json.loads(response_criminal_records.text)}"
        # )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ validation.uz: {e}")
